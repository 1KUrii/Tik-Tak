//
//  GameViewModel.swift
//  Takoe
//
//  Created by Andy on 27.03.2022.
//

import SwiftUI

final class GameViewModel: ObservableObject{
    let colums: [GridItem] = [GridItem(.flexible()),
                              GridItem(.flexible()),
                              GridItem(.flexible()),
                              GridItem(.flexible()),
                              GridItem(.flexible()),
                              GridItem(.flexible()),
                              GridItem(.flexible()),
                              GridItem(.flexible()),
                              GridItem(.flexible()),
                              GridItem(.flexible())]
    
    @Published var moves: [Move?] = Array(repeating: nil, count: 100)
    @Published var isGameboardDisable = false
    @Published var alertItem: AlertItem?
    
    func processPlayerMove(for position: Int) {
            if isSquareOccupied(in: moves, forIndex: position){return}
            moves[position] = Move(player: .human, boardIndex: position)
            
            if checkWin(for: .human, in: moves){
                alertItem = AlertContext.humanWin
                return
            }
            if checkForDraw(in: moves){
                alertItem = AlertContext.draw
                return
            }
            
            isGameboardDisable = true

            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5){ [self] in
                let computerPosition = computerMove(in: moves)
                moves[computerPosition] = Move(player: .computer, boardIndex: computerPosition)
                isGameboardDisable = false
                if checkWin(for: .computer, in: moves){
                    alertItem = AlertContext.computerWin
                    return
                }
                if checkForDraw(in: moves){
                    alertItem = AlertContext.draw
                    return
                }
            }
    }
    
    func isSquareOccupied(in moves: [Move?], forIndex index: Int)-> Bool{
        return moves.contains(where: {$0?.boardIndex == index})
    }
    
    func computerMove(in moves: [Move?])-> Int{
        
        //if AI can win, then win
        let winPatterns: Set<Set<Int>> = [[0, 1, 2, 3, 4], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [11, 12, 13, 14, 15], [12, 13, 14, 15, 16], [13, 14, 15, 16, 17], [14, 15, 16, 17, 18], [15, 16, 17, 18, 19], [20, 21, 22, 23, 24], [21, 22, 23, 24, 25], [22, 23, 24, 25, 26], [23, 24, 25, 26, 27], [24, 25, 26, 27, 28], [25, 26, 27, 28, 29], [30, 31, 32, 33, 34], [31, 32, 33, 34, 35], [32, 33, 34, 35, 36], [33, 34, 35, 36, 37], [34, 35, 36, 37, 38], [35, 36, 37, 38, 39], [40, 41, 42, 43, 44], [41, 42, 43, 44, 45], [42, 43, 44, 45, 46], [43, 44, 45, 46, 47], [44, 45, 46, 47, 48], [45, 46, 47, 48, 49], [50, 51, 52, 53, 54], [51, 52, 53, 54, 55], [52, 53, 54, 55, 56], [53, 54, 55, 56, 57], [54, 55, 56, 57, 58], [55, 56, 57, 58, 59], [60, 61, 62, 63, 64], [61, 62, 63, 64, 65], [62, 63, 64, 65, 66], [63, 64, 65, 66, 67], [64, 65, 66, 67, 68], [65, 66, 67, 68, 69], [70, 71, 72, 73, 74], [71, 72, 73, 74, 75], [72, 73, 74, 75, 76], [73, 74, 75, 76, 77], [74, 75, 76, 77, 78], [75, 76, 77, 78, 79], [80, 81, 82, 83, 84], [81, 82, 83, 84, 85], [82, 83, 84, 85, 86], [83, 84, 85, 86, 87], [84, 85, 86, 87, 88], [85, 86, 87, 88, 89], [90, 91, 92, 93, 94], [91, 92, 93, 94, 95], [92, 93, 94, 95, 96], [93, 94, 95, 96, 97], [94, 95, 96, 97, 98], [95, 96, 97, 98, 99], [0, 10, 20, 30, 40], [10, 20, 30, 40, 50], [20, 30, 40, 50, 60], [30, 40, 50, 60, 70], [40, 50, 60, 70, 80], [50, 60, 70, 80, 90], [1, 11, 21, 31, 41], [11, 21, 31, 41, 51], [21, 31, 41, 51, 61], [31, 41, 51, 61, 71], [41, 51, 61, 71, 81], [51, 61, 71, 81, 91], [2, 12, 22, 32, 42], [12, 22, 32, 42, 52], [22, 32, 42, 52, 62], [32, 42, 52, 62, 72], [42, 52, 62, 72, 82], [52, 62, 72, 82, 92], [3, 13, 23, 33, 43], [13, 23, 33, 43, 53], [23, 33, 43, 53, 63], [33, 43, 53, 63, 73], [43, 53, 63, 73, 83], [53, 63, 73, 83, 93], [4, 14, 24, 34, 44], [14, 24, 34, 44, 54], [24, 34, 44, 54, 64], [34, 44, 54, 64, 74], [44, 54, 64, 74, 84], [54, 64, 74, 84, 94], [5, 15, 25, 35, 45], [15, 25, 35, 45, 55], [25, 35, 45, 55, 65], [35, 45, 55, 65, 75], [45, 55, 65, 75, 85], [55, 65, 75, 85, 95], [6, 16, 26, 36, 46], [16, 26, 36, 46, 56], [26, 36, 46, 56, 66], [36, 46, 56, 66, 76], [46, 56, 66, 76, 86], [56, 66, 76, 86, 96], [7, 17, 27, 37, 47], [17, 27, 37, 47, 57], [27, 37, 47, 57, 67], [37, 47, 57, 67, 77], [47, 57, 67, 77, 87], [57, 67, 77, 87, 97], [8, 18, 28, 38, 48], [18, 28, 38, 48, 58], [28, 38, 48, 58, 68], [38, 48, 58, 68, 78], [48, 58, 68, 78, 88], [58, 68, 78, 88, 98], [9, 19, 29, 39, 49], [19, 29, 39, 49, 59], [29, 39, 49, 59, 69], [39, 49, 59, 69, 79], [49, 59, 69, 79, 89], [59, 69, 79, 89, 99], [0, 11, 22, 33, 44], [11, 22, 33, 44, 55], [22, 33, 44, 55, 66], [33, 44, 55, 66, 77], [44, 55, 66, 77, 88], [55, 66, 77, 88, 99], [10, 21, 32, 43, 54], [21, 32, 43, 54, 65], [32, 43, 54, 65, 76], [43, 54, 65, 76, 87], [54, 65, 76, 87, 98], [20, 31, 42, 53, 64], [31, 42, 53, 64, 75], [42, 53, 64, 75, 86], [53, 64, 75, 86, 97], [30, 41, 52, 63, 74], [41, 52, 63, 74, 85], [52, 63, 74, 85, 96], [40, 51, 62, 73, 84], [51, 62, 73, 84, 95], [50, 61, 72, 83, 94], [10, 21, 32, 43, 54], [21, 32, 43, 54, 65], [32, 43, 54, 65, 76], [43, 54, 65, 76, 87], [54, 65, 76, 87, 98], [20, 31, 42, 53, 64], [31, 42, 53, 64, 75], [42, 53, 64, 75, 86], [53, 64, 75, 86, 97], [30, 41, 52, 63, 74], [41, 52, 63, 74, 85], [52, 63, 74, 85, 96], [40, 51, 62, 73, 84], [51, 62, 73, 84, 95], [50, 61, 72, 83, 94], [9, 18, 27, 36, 45], [18, 27, 36, 45, 54], [27, 36, 45, 54, 63], [36, 45, 54, 63, 72], [45, 54, 63, 72, 81], [54, 63, 72, 81, 90], [19, 28, 37, 46, 55], [28, 37, 46, 55, 64], [37, 46, 55, 64, 73], [46, 55, 64, 73, 82], [55, 64, 73, 82, 91], [29, 38, 47, 56, 65], [38, 47, 56, 65, 74], [47, 56, 65, 74, 83], [56, 65, 74, 83, 92], [39, 48, 57, 66, 75], [48, 57, 66, 75, 84], [57, 66, 75, 84, 93], [49, 58, 67, 76, 85], [58, 67, 76, 85, 94], [59, 68, 77, 86, 95], [9, 18, 27, 36, 45], [18, 27, 36, 45, 54], [27, 36, 45, 54, 63], [36, 45, 54, 63, 72], [45, 54, 63, 72, 81], [8, 17, 26, 35, 44], [17, 26, 35, 44, 53], [26, 35, 44, 53, 62], [35, 44, 53, 62, 71], [7, 16, 25, 34, 43], [16, 25, 34, 43, 52], [25, 34, 43, 52, 61], [6, 15, 24, 33, 42], [15, 24, 33, 42, 51], [5, 14, 23, 32, 41]]

    
        let computerMoves = moves.compactMap{ $0 }.filter{ $0.player == .computer }
        let computerPosition = Set(computerMoves.map { $0.boardIndex })
        
        for pattern in winPatterns {
            let winPosition = pattern.subtracting(computerPosition)
            
            if winPosition.count == 1{
                let isAvaiable  = !isSquareOccupied(in: moves, forIndex: winPosition.first!)
                if isAvaiable {return winPosition.first!}
            }
        }
        
        //if AI can't win, then block
        let humanMoves = moves.compactMap{ $0 }.filter{ $0.player == .human }
        let humanPosition = Set(humanMoves.map { $0.boardIndex })
        
        for pattern in winPatterns {
            let winPosition = pattern.subtracting(humanPosition)
             
            if winPosition.count == 1{
                let isAvaiable  = !isSquareOccupied(in: moves, forIndex: winPosition.first!)
                if isAvaiable {return winPosition.first!}
            }
        }
        
        //if AI can't block, then take middle square
        let centerSquare = 45
        if !isSquareOccupied(in: moves, forIndex: centerSquare){
            return centerSquare
        }
        
        //if AI can't take middle square, take random available square
        
    
        var movePosition = Int.random(in: 0..<100)
        while isSquareOccupied(in: moves, forIndex: movePosition){
            movePosition = Int.random(in: 0..<100)
        }
        return movePosition
    }
    
    func checkWin(for player: Player, in move: [Move?]) -> Bool{
        let winPatterns: Set<Set<Int>> = [[0, 1, 2, 3, 4], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [11, 12, 13, 14, 15], [12, 13, 14, 15, 16], [13, 14, 15, 16, 17], [14, 15, 16, 17, 18], [15, 16, 17, 18, 19], [20, 21, 22, 23, 24], [21, 22, 23, 24, 25], [22, 23, 24, 25, 26], [23, 24, 25, 26, 27], [24, 25, 26, 27, 28], [25, 26, 27, 28, 29], [30, 31, 32, 33, 34], [31, 32, 33, 34, 35], [32, 33, 34, 35, 36], [33, 34, 35, 36, 37], [34, 35, 36, 37, 38], [35, 36, 37, 38, 39], [40, 41, 42, 43, 44], [41, 42, 43, 44, 45], [42, 43, 44, 45, 46], [43, 44, 45, 46, 47], [44, 45, 46, 47, 48], [45, 46, 47, 48, 49], [50, 51, 52, 53, 54], [51, 52, 53, 54, 55], [52, 53, 54, 55, 56], [53, 54, 55, 56, 57], [54, 55, 56, 57, 58], [55, 56, 57, 58, 59], [60, 61, 62, 63, 64], [61, 62, 63, 64, 65], [62, 63, 64, 65, 66], [63, 64, 65, 66, 67], [64, 65, 66, 67, 68], [65, 66, 67, 68, 69], [70, 71, 72, 73, 74], [71, 72, 73, 74, 75], [72, 73, 74, 75, 76], [73, 74, 75, 76, 77], [74, 75, 76, 77, 78], [75, 76, 77, 78, 79], [80, 81, 82, 83, 84], [81, 82, 83, 84, 85], [82, 83, 84, 85, 86], [83, 84, 85, 86, 87], [84, 85, 86, 87, 88], [85, 86, 87, 88, 89], [90, 91, 92, 93, 94], [91, 92, 93, 94, 95], [92, 93, 94, 95, 96], [93, 94, 95, 96, 97], [94, 95, 96, 97, 98], [95, 96, 97, 98, 99], [0, 10, 20, 30, 40], [10, 20, 30, 40, 50], [20, 30, 40, 50, 60], [30, 40, 50, 60, 70], [40, 50, 60, 70, 80], [50, 60, 70, 80, 90], [1, 11, 21, 31, 41], [11, 21, 31, 41, 51], [21, 31, 41, 51, 61], [31, 41, 51, 61, 71], [41, 51, 61, 71, 81], [51, 61, 71, 81, 91], [2, 12, 22, 32, 42], [12, 22, 32, 42, 52], [22, 32, 42, 52, 62], [32, 42, 52, 62, 72], [42, 52, 62, 72, 82], [52, 62, 72, 82, 92], [3, 13, 23, 33, 43], [13, 23, 33, 43, 53], [23, 33, 43, 53, 63], [33, 43, 53, 63, 73], [43, 53, 63, 73, 83], [53, 63, 73, 83, 93], [4, 14, 24, 34, 44], [14, 24, 34, 44, 54], [24, 34, 44, 54, 64], [34, 44, 54, 64, 74], [44, 54, 64, 74, 84], [54, 64, 74, 84, 94], [5, 15, 25, 35, 45], [15, 25, 35, 45, 55], [25, 35, 45, 55, 65], [35, 45, 55, 65, 75], [45, 55, 65, 75, 85], [55, 65, 75, 85, 95], [6, 16, 26, 36, 46], [16, 26, 36, 46, 56], [26, 36, 46, 56, 66], [36, 46, 56, 66, 76], [46, 56, 66, 76, 86], [56, 66, 76, 86, 96], [7, 17, 27, 37, 47], [17, 27, 37, 47, 57], [27, 37, 47, 57, 67], [37, 47, 57, 67, 77], [47, 57, 67, 77, 87], [57, 67, 77, 87, 97], [8, 18, 28, 38, 48], [18, 28, 38, 48, 58], [28, 38, 48, 58, 68], [38, 48, 58, 68, 78], [48, 58, 68, 78, 88], [58, 68, 78, 88, 98], [9, 19, 29, 39, 49], [19, 29, 39, 49, 59], [29, 39, 49, 59, 69], [39, 49, 59, 69, 79], [49, 59, 69, 79, 89], [59, 69, 79, 89, 99], [0, 11, 22, 33, 44], [11, 22, 33, 44, 55], [22, 33, 44, 55, 66], [33, 44, 55, 66, 77], [44, 55, 66, 77, 88], [55, 66, 77, 88, 99], [10, 21, 32, 43, 54], [21, 32, 43, 54, 65], [32, 43, 54, 65, 76], [43, 54, 65, 76, 87], [54, 65, 76, 87, 98], [20, 31, 42, 53, 64], [31, 42, 53, 64, 75], [42, 53, 64, 75, 86], [53, 64, 75, 86, 97], [30, 41, 52, 63, 74], [41, 52, 63, 74, 85], [52, 63, 74, 85, 96], [40, 51, 62, 73, 84], [51, 62, 73, 84, 95], [50, 61, 72, 83, 94], [10, 21, 32, 43, 54], [21, 32, 43, 54, 65], [32, 43, 54, 65, 76], [43, 54, 65, 76, 87], [54, 65, 76, 87, 98], [20, 31, 42, 53, 64], [31, 42, 53, 64, 75], [42, 53, 64, 75, 86], [53, 64, 75, 86, 97], [30, 41, 52, 63, 74], [41, 52, 63, 74, 85], [52, 63, 74, 85, 96], [40, 51, 62, 73, 84], [51, 62, 73, 84, 95], [50, 61, 72, 83, 94], [9, 18, 27, 36, 45], [18, 27, 36, 45, 54], [27, 36, 45, 54, 63], [36, 45, 54, 63, 72], [45, 54, 63, 72, 81], [54, 63, 72, 81, 90], [19, 28, 37, 46, 55], [28, 37, 46, 55, 64], [37, 46, 55, 64, 73], [46, 55, 64, 73, 82], [55, 64, 73, 82, 91], [29, 38, 47, 56, 65], [38, 47, 56, 65, 74], [47, 56, 65, 74, 83], [56, 65, 74, 83, 92], [39, 48, 57, 66, 75], [48, 57, 66, 75, 84], [57, 66, 75, 84, 93], [49, 58, 67, 76, 85], [58, 67, 76, 85, 94], [59, 68, 77, 86, 95], [9, 18, 27, 36, 45], [18, 27, 36, 45, 54], [27, 36, 45, 54, 63], [36, 45, 54, 63, 72], [45, 54, 63, 72, 81], [8, 17, 26, 35, 44], [17, 26, 35, 44, 53], [26, 35, 44, 53, 62], [35, 44, 53, 62, 71], [7, 16, 25, 34, 43], [16, 25, 34, 43, 52], [25, 34, 43, 52, 61], [6, 15, 24, 33, 42], [15, 24, 33, 42, 51], [5, 14, 23, 32, 41]]

    
        let playerMoves = moves.compactMap{ $0 }.filter{ $0.player == player }
        let playerPosition = Set(playerMoves.map { $0.boardIndex })
        
        for pattern in winPatterns where pattern.isSubset(of: playerPosition){return true}
        return false
    }
    func checkForDraw(in moves: [Move?]) -> Bool{
        return moves.compactMap{ $0 }.count == 100
    }
    
    func resetGame(){
        moves = Array(repeating: nil, count: 100)
    }
}
